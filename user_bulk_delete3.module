<?php

//$Id$

/**
 * @file 
 * Form that lists user registration details including added fields 
 * and allow for bulk deletion to cope with spam registrations
 */


/**
 * Implementation of hook_menu().
 */


/**
 * @todo
 * 
 * create bulk delete form
 * integrate output string into form
 * refactor
 * make drupal freindly 
 */
function user_bulk_delete_menu() {
    $items['user_bulk_delete'] = array(
        'title' => 'Bulk Delete Users', 
        'page callback' => 'user_bulk_delete_page',
        'access arguments' => array('access content'),
    );
    return $items;
}


function start_output(&$output_string){
   $output_string  = "<ul class='user_bulk_delete_list'>\n";
}


function indent_output(&$output_string, $label){
    $output_string  .= "<li>" . $label . "\n <ul class='user_bulk_delete_indented_list'>\n";
}


function outdent_output(&$output_string){
     $output_string  .= "</ul></li>\n";
}


function end_output(&$output_string){
     $output_string  .= "</ul>\n";
    
}


function grow_output(&$output_string = "",$label= "",$value=""){
    if ($label == "" && $value == ""){
        $output_string .= "<li class='blank_line'></li>";
    }
    else{
        $output_string .= "<li>" . $label . " : " . $value . "</li>\n" ;
    }
}





function user_bulk_delete_page(){
    // Get list of fields for user entity type
    $user_fields = field_info_instances('user');
    // get list of field clooection fields
    $field_collection_fields = field_info_instances('field_collection_item');
    // Get all the users on the system
    $users = entity_load('user');
    //initialise output string
    $output_string = "";
    start_output($output_string);
    //loop through the users of the system
    foreach($users as $selected_user){
        // check that they are regestered (not ananomyus 
        // and that their status is blocked
        if ($selected_user->access =="0" && 
               in_array("authenticated user", $selected_user-> roles)){
            grow_output($output_string);
            grow_output($output_string,'Username', $selected_user->name);
            grow_output($output_string,'email', $selected_user->mail);
            //load entity information for this user
            $entity = entity_load_single('user',$selected_user->uid);
            // loop throught the fileds for this user
            foreach ($user_fields['user'] as $user_field){
                // if field is a field collection field
                if(array_key_exists($user_field['field_name'],$field_collection_fields)){
                    // do field collection stuff
                    //debugger catcher code
                    $foo = "barr";
                    // attempt to load the field collection indexes referenced by this field
                    $field_values = field_get_items('user',$entity,$user_field['field_name']);
                    // if there are refernece values for this field
                    if(is_array($field_values)){
                        // for each reference value for this field
                        foreach($field_values as $field_values_index){
                            // if it has a value 
                            if (isset($field_values_index['value'])){  
                                // Add the name of this field collection field to output string
                                indent_output($output_string,$user_field['label']);
                               
                                //load the field collection for this reference
                                 $loaded_field_collection = 
                                    field_collection_item_load($field_values_index['value']);
                                // for each field in the filed collection 
                                foreach($loaded_field_collection as 
                                        $field_collection_item_key => $field_collection_item_value){
                                     // if the key starts with "field_" it contains values 
                                     // unless its "field_name"
                                     if(preg_match('/^field_/', $field_collection_item_key) && 
                                             ($field_collection_item_key != "field_name")){
                                         if(array_key_exists('und', $field_collection_item_value)){
                                             foreach($field_collection_item_value['und'] 
                                                     as $field_colection_value){
                                                     $output_string_label_prep = 
                                                        $field_collection_fields[$user_field['field_name']][$field_collection_item_key]['label'];
                                                     $output_string_value_prep = 
                                                        $field_colection_value['value'];
                                                 
                                                        grow_output($output_string,$output_string_label_prep,$output_string_value_prep);
                                                           
                                                      $foo = "barr"; 
                                             }
                                         }
                                       $foo = "barr";  
                                     }
                                }
                                outdent_output($output_string);
                                $foo = "barr";
                            }
                        }
                    }
                }
                else{
                    // get an array of values for this field
                    $field_values = field_get_items('user',$entity,$user_field['field_name']);
                    if(is_array($field_values)){
                        foreach($field_values as $field_values_index){
                            if (isset($field_values_index['value'])){
                                grow_output($output_string,$user_field['label'],
                                            $field_values_index['value']);
                            }
                        }
                    }
                    
                    
                }
                
            }
        }   
        
    }
    end_output($output_string);
    return $output_string;

}


        





/**
 * Define the form. 
 */
function user_bulk_delete_form(){
    $form['user_name']= array(
        '#title' => t('Your Name'),
        '#type' => 'textfield',
        '#description' => t('Please enter your name.'),
    );
    $form['submit'] = array(
            '#type' => 'submit',
            '#value' => t('Submit')
    );
    return $form;        
}

/**
 * Validate the form. 
 */
function user_bulk_delete_form_validate($form, &$form_state){
    if ($form_state['values']['user_name'] == 'King Kong') {
        // We notify the form API that this field has failed validation.
        form_set_error('user_name', t('King Kong is not allowed to use this form.'));
    }
}

/**
 * Handle post validation form submission.
 */
function user_bulk_delete_form_submit($form, &$form_state){
    $name = $form_state['values']['user_name'];
    drupal_set_message(t('Thanks for filling out the form, %name',
            array('%name' => $name)));
}





